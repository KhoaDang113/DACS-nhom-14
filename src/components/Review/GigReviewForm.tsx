import React, { useState } from 'react';
import { toast } from 'react-hot-toast';
import { FaInfoCircle, FaStar } from 'react-icons/fa';
import axios from 'axios';
import RatingStars from './RatingStars';

// Import interface t·ª´ trang ReviewGig
interface CompletedOrder {
  id: string;
  gigId: string;
  gigTitle: string;
  sellerId: string;
  sellerName: string;
  sellerAvatar: string; 
  completedDate: Date;
  price: number;
  orderDuration: number;
  isReviewed: boolean;
}

interface GigReviewFormProps {
  order: CompletedOrder;
  onSubmitSuccess: () => void;
}

const GigReviewForm: React.FC<GigReviewFormProps> = ({ order, onSubmitSuccess }) => {
  const [overallRating, setOverallRating] = useState<number>(5);
  const [speedRating, setSpeedRating] = useState<number>(5);
  const [communicationRating, setCommunicationRating] = useState<number>(5);
  const [qualityRating, setQualityRating] = useState<number>(5);
  const [title, setTitle] = useState<string>('');
  const [comment, setComment] = useState<string>('');
  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);
  const [error, setError] = useState<string>('');

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setError('');

    // Ki·ªÉm tra n·ªôi dung ƒë√°nh gi√° c√≥ ƒë·ªß d√†i kh√¥ng
    if (comment.length < 20) {
      setError('Vui l√≤ng nh·∫≠p ƒë√°nh gi√° chi ti·∫øt (√≠t nh·∫•t 20 k√Ω t·ª±)');
      return;
    }

    try {
      setIsSubmitting(true);
      
      // Chu·∫©n b·ªã d·ªØ li·ªáu ƒë√°nh gi√° ƒë√∫ng ƒë·ªãnh d·∫°ng m√† backend y√™u c·∫ßu
      const reviewData = {
        orderId: order.id,
        star: overallRating,
        title: title || `ƒê√°nh gi√° d·ªãch v·ª• ${order.gigTitle}`,
        description: comment
        // Chi ti·∫øt v·ªÅ t·ªëc ƒë·ªô, giao ti·∫øp, ch·∫•t l∆∞·ª£ng c√≥ th·ªÉ ƒë∆∞·ª£c l∆∞u trong m√¥ t·∫£
        // ho·∫∑c m·ªü r·ªông backend ƒë·ªÉ l∆∞u tr·ªØ th√™m c√°c th√¥ng tin n√†y
      };
      
      console.log("Sending review data:", reviewData);
      
      // G·ªçi API ƒë·ªÉ g·ª≠i ƒë√°nh gi√° v·ªõi endpoint ƒë√∫ng
      const response = await axios.post(
        `http://localhost:5000/api/review/${order.gigId}/create`,
        reviewData,
        { withCredentials: true }
      );

      // Ki·ªÉm tra k·∫øt qu·∫£ t·ª´ API
      if (response.data && !response.data.error) {
        // Th√¥ng b√°o th√†nh c√¥ng
        toast.success('ƒê√°nh gi√° c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!', {
          duration: 3000,
          position: 'top-center',
          icon: 'üëç'
        });
        
        // G·ªçi callback ƒë·ªÉ th√¥ng b√°o ƒë√°nh gi√° th√†nh c√¥ng
        onSubmitSuccess();
      } else {
        // Hi·ªÉn th·ªã l·ªói t·ª´ API
        throw new Error(response.data.message || 'C√≥ l·ªói x·∫£y ra khi g·ª≠i ƒë√°nh gi√°');
      }
    } catch (error: any) {
      setIsSubmitting(false);
      toast.error(error.response?.data?.message || error.message || 'C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau!');
      console.error('L·ªói khi g·ª≠i ƒë√°nh gi√°:', error);
    }
  };

  return (
    <div className="bg-white rounded-lg shadow-md p-6 max-w-3xl mx-auto">
      <form onSubmit={handleSubmit}>
        <div className="mb-6">
          <h3 className="text-lg font-medium mb-2">ƒê√°nh gi√° t·ªïng th·ªÉ</h3>
          <RatingStars 
            initialRating={overallRating} 
            onChange={setOverallRating} 
            size={32}
          />
        </div>

        <div className="mb-6">
          <label htmlFor="title" className="block text-sm font-medium text-gray-700 mb-1">
            Ti√™u ƒë·ªÅ ƒë√°nh gi√° <span className="text-gray-500 text-xs">(kh√¥ng b·∫Øt bu·ªôc)</span>
          </label>
          <input
            type="text"
            id="title"
            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
            placeholder="V√≠ d·ª•: Tuy·ªát v·ªùi! ho·∫∑c ƒê√∫ng y√™u c·∫ßu"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            maxLength={100}
          />
        </div>

        <div className="mb-6">
          <label htmlFor="comment" className="block text-sm font-medium text-gray-700 mb-1">
            N·ªôi dung ƒë√°nh gi√° <span className="text-red-500">*</span>
          </label>
          <textarea
            id="comment"
            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
            placeholder="H√£y chia s·∫ª tr·∫£i nghi·ªám c·ªßa b·∫°n v·ªÅ ch·∫•t l∆∞·ª£ng, t·ªëc ƒë·ªô, giao ti·∫øp..."
            rows={5}
            value={comment}
            onChange={(e) => setComment(e.target.value)}
            minLength={20}
            required
          />
          <div className="flex justify-between mt-1">
            <p className="text-sm text-gray-500">
              T·ªëi thi·ªÉu 20 k√Ω t·ª±
            </p>
            <p className={`text-sm ${comment.length < 20 ? 'text-red-500' : 'text-green-500'}`}>
              {comment.length}/20
            </p>
          </div>
          {error && <p className="text-red-500 text-sm mt-1">{error}</p>}
        </div>

        <div className="text-center">
          <button
            type="submit"
            className="px-6 py-3 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-colors w-full sm:w-auto font-medium"
            disabled={isSubmitting}
          >
            {isSubmitting ? (
              <div className="flex items-center justify-center">
                <div className="animate-spin rounded-full h-4 w-4 border-t-2 border-b-2 border-white mr-2"></div>
                ƒêang g·ª≠i...
              </div>
            ) : (
              <>
                <FaStar className="inline-block mr-1" /> G·ª≠i ƒë√°nh gi√°
              </>
            )}
          </button>
        </div>
      </form>
    </div>
  );
};

export default GigReviewForm;