CÁC CHỈNH SỬA BACKEND

1. Cập nhật OrderController.js - Thêm thông tin chi tiết freelancer vào API getOrderById:

```javascript
const getOrderById = catchAsync(async (req, res) => {
  const { orderId } = req.params;

  // Find the order with populated references
  const order = await orderModel
    .findById(orderId)
    .populate("gigId", "title price media duration description")
    .populate("customerId", "name email avatar")
    .lean();

  if (!order) {
    throw new CustomException("Order not found", 404);
  }

  // Check if the user is authorized to view this order
  // Allow both the customer and the freelancer to view the order
  if (
    req.user._id.toString() !== order.customerId._id.toString() &&
    req.UserID !== order.freelancerId
  ) {
    throw new CustomException("You are not authorized to view this order", 403);
  }

  // Get freelancer details
  const freelancer = await userModel
    .findOne({ clerkId: order.freelancerId })
    .select("name avatar _id")
    .lean();

  // Enhance order object with freelancer details
  const enhancedOrder = {
    ...order,
    freelancerInfo: {
      name: freelancer?.name || "Người bán",
      avatar: freelancer?.avatar || "https://randomuser.me/api/portraits/men/42.jpg",
      _id: freelancer?._id || null
    }
  };

  return res.status(200).json({
    error: false,
    message: "Order retrieved successfully",
    order: enhancedOrder,
  });
});
```

2. Thêm endpoint mới vào file user.js:

```javascript
const userRouter = require("express").Router();
const { getMe, getUserById } = require("../controllers/userController");

const authUser = require("../middlewares/authUser");

userRouter.get("/me", authUser, getMe);
userRouter.get("/profile/:userId", authUser, getUserById);
module.exports = userRouter;
```

3. Thêm phương thức getUserById vào userController.js:

```javascript
const getUserById = catchAsync(async (req, res) => {
  const { userId } = req.params;
  
  const user = await userModel
    .findById(userId)
    .select("name email avatar role createdAt")
    .lean();
  
  if (!user) {
    return res.status(404).json({
      error: true,
      message: "Không tìm thấy người dùng",
    });
  }
  
  return res.status(200).json({
    error: false,
    message: "Lấy thông tin người dùng thành công",
    user,
  });
});
```

4. Cập nhật model/order.model.js nếu cần (kiểm tra xem đã đúng cấu trúc):

```javascript
const mongoose = require("mongoose");

const orderSchema = new mongoose.Schema(
  {
    gigId: {
      type: mongoose.Types.ObjectId,
      ref: "Gig",
      require: true,
    },
    customerId: {
      type: mongoose.Types.ObjectId,
      ref: "User",
      require: true,
    },
    freelancerId: {
      type: String,
      require: true,
    },
    title: {
      type: String,
      require: true,
    },
    media: [
      {
        type: { type: String },
        url: String,
        _id: mongoose.Schema.Types.ObjectId,
      },
    ],
    requirements: {
      type: String,
    },
    status: {
      type: String,
      enum: ["pending", "approved", "completed", "canceled", "rejected"],
      default: "pending",
    },
    cancelRequestId: {
      type: mongoose.Types.ObjectId,
      ref: "CancelRequest",
    },
    price: {
      type: mongoose.Types.Decimal128,
      require: true,
    },
  },
  {
    timestamps: true,
  }
);

module.exports = mongoose.model("Order", orderSchema);
```

5. Luồng dữ liệu Backend:
   - API getOrderById trả về thông tin đơn hàng đã được populate các trường quan trọng
   - Thông tin freelancer được bổ sung trong trường freelancerInfo
   - Endpoint /api/user/profile/:userId để lấy thông tin chi tiết người dùng khi cần
   - Thông tin gig được populate đầy đủ bao gồm title, price, media, duration và description

// User xem user