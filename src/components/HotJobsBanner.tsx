import React, { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import { HotJobAd, formatCurrency } from "../lib/hotJobData";
import { ChevronLeft, ChevronRight, DollarSign, Star } from "lucide-react";


// D·ªØ li·ªáu m·∫´u - Trong th·ª±c t·∫ø s·∫Ω ƒë∆∞·ª£c l·∫•y t·ª´ API
const mockHotJobs: HotJobAd[] = [
  {
    id: "ad1",
    jobId: "job1",
    job: {
      _id: "job1",
      title: "Thi·∫øt k·∫ø logo chuy√™n nghi·ªáp",
      description: "T√¥i s·∫Ω thi·∫øt k·∫ø logo ƒë·ªôc ƒë√°o v√† s√°ng t·∫°o cho th∆∞∆°ng hi·ªáu c·ªßa b·∫°n",
      price: 500000,
      freelancerId: "user1",
      freelancer: {
        name: "den gao",
        avatar: "https://randomuser.me/api/portraits/men/32.jpg",
      },
    },
    title: "Logo ƒë·ªôc ƒë√°o ch·ªâ t·ª´ 500k",
    description: "Thi·∫øt k·∫ø logo chuy√™n nghi·ªáp v·ªõi gi√° t·ªët nh·∫•t th·ªã tr∆∞·ªùng",
    bannerImage: "https://images.unsplash.com/photo-1626785774573-4b799315345d?q=80&w=1000&auto=format&fit=crop",
    startDate: new Date(),
    endDate: new Date(new Date().setDate(new Date().getDate() + 7)),
    packageId: "pkg1",
    status: 'active',
    createdAt: new Date(),
  },
  {
    id: "ad2",
    jobId: "job2",
    job: {
      _id: "job2",
      title: "Thi·∫øt k·∫ø website responsive",
      description: "T√¥i s·∫Ω thi·∫øt k·∫ø website chuy√™n nghi·ªáp, t∆∞∆°ng th√≠ch m·ªçi thi·∫øt b·ªã",
      price: 2500000,
      freelancerId: "user1",
      freelancer: {
        name: "Ng√¥ ƒêƒÉng Khoa",
        avatar: "https://randomuser.me/api/portraits/men/45.jpg",
      },
    },
    title: "Website chuy√™n nghi·ªáp cho doanh nghi·ªáp",
    description: "Thi·∫øt k·∫ø website responsive v·ªõi ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng",
    bannerImage: "https://images.unsplash.com/photo-1598550476439-6847785fcea6?q=80&w=1000&auto=format&fit=crop",
    startDate: new Date(),
    endDate: new Date(new Date().setDate(new Date().getDate() + 30)),
    packageId: "pkg3",
    status: 'active',
    createdAt: new Date(),
  },
  {
    id: "ad3",
    jobId: "job3",
    job: {
      _id: "job3",
      title: "Thi·∫øt k·∫ø th·ªùi trang",
      description: "T√¥i s·∫Ω thi·∫øt k·∫ø trang ph·ª•c th·ªùi trang ƒë√°p ·ª©ng nhu c·∫ßu c·ªßa b·∫°n",
      price: 800000,
      freelancerId: "user3",
      freelancer: {
        name: "Ng√¥ ƒêƒÉng Khoa",
        avatar: "https://randomuser.me/api/portraits/men/41.jpg",
      },
    },
    title: "Thi·∫øt k·∫ø th·ªùi trang ƒë·ªôc ƒë√°o",
    description: "Thi·∫øt k·∫ø th·ªùi trang theo √Ω t∆∞·ªüng ri√™ng c·ªßa b·∫°n",
    bannerImage: "https://images.unsplash.com/photo-1558769132-cb1aea458c5e?q=80&w=1000&auto=format&fit=crop",
    startDate: new Date(),
    endDate: new Date(new Date().setDate(new Date().getDate() + 14)),
    packageId: "pkg2",
    status: 'active',
    createdAt: new Date(),
  },
  {
    id: "ad4",
    jobId: "job4",
    job: {
      _id: "job4",
      title: "Thi·∫øt k·∫ø giao di·ªán website",
      description: "T√¥i s·∫Ω thi·∫øt k·∫ø UI/UX website hi·ªán ƒë·∫°i v√† chuy√™n nghi·ªáp",
      price: 1800000,
      freelancerId: "user4",
      freelancer: {
        name: "Ng√¥ ƒêƒÉng Khoa",
        avatar: "https://randomuser.me/api/portraits/men/37.jpg",
      },
    },
    title: "Thi·∫øt k·∫ø giao di·ªán website",
    description: "Thi·∫øt k·∫ø UI/UX chuy√™n nghi·ªáp, thu h√∫t ng∆∞·ªùi d√πng",
    bannerImage: "https://images.unsplash.com/photo-1547658719-da2b51169166?q=80&w=1000&auto=format&fit=crop",
    startDate: new Date(),
    endDate: new Date(new Date().setDate(new Date().getDate() + 14)),
    packageId: "pkg2",
    status: 'active',
    createdAt: new Date(),
  },
  {
    id: "ad5",
    jobId: "job5",
    job: {
      _id: "job5",
      title: "C·∫Øt HTML/CSS t·ª´ thi·∫øt k·∫ø",
      description: "T√¥i s·∫Ω c·∫Øt HTML/CSS t·ª´ c√°c file thi·∫øt k·∫ø c·ªßa b·∫°n",
      price: 1200000,
      freelancerId: "user5",
      freelancer: {
        name: "Ng√¥ ƒêƒÉng Khoa",
        avatar: "https://randomuser.me/api/portraits/men/52.jpg",
      },
    },
    title: "C·∫Øt HTML/CSS t·ª´ thi·∫øt k·∫ø",
    description: "Chuy·ªÉn ƒë·ªïi file thi·∫øt k·∫ø sang HTML/CSS ch√≠nh x√°c, t∆∞∆°ng th√≠ch m·ªçi tr√¨nh duy·ªát",
    bannerImage: "https://images.unsplash.com/photo-1461749280684-dccba630e2f6?q=80&w=1000&auto=format&fit=crop",
    startDate: new Date(),
    endDate: new Date(new Date().setDate(new Date().getDate() + 7)),
    packageId: "pkg1",
    status: 'active',
    createdAt: new Date(),
  },
];


const HotJobsBanner: React.FC = () => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [hotJobs, setHotJobs] = useState<HotJobAd[]>([]);
  const [touchStart, setTouchStart] = useState<number | null>(null);
  const [touchEnd, setTouchEnd] = useState<number | null>(null);
  const [autoplayEnabled, setAutoplayEnabled] = useState(true);
 
  // X√°c ƒë·ªãnh s·ªë l∆∞·ª£ng th·∫ª c·∫ßn hi·ªÉn th·ªã d·ª±a tr√™n k√≠ch th∆∞·ªõc m√†n h√¨nh
  const [slidesToShow, setSlidesToShow] = useState(3);
 
  // L·∫•y d·ªØ li·ªáu hot jobs
  useEffect(() => {
    // Trong th·ª±c t·∫ø s·∫Ω g·ªçi API ·ªü ƒë√¢y
    // const fetchHotJobs = async () => {
    //   const response = await fetch('/api/hot-jobs');
    //   const data = await response.json();
    //   setHotJobs(data);
    // };
    // fetchHotJobs();
   
    // S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u cho m·ª•c ƒë√≠ch tr√¨nh di·ªÖn
    setHotJobs(mockHotJobs);
  }, []);
 
  // Ki·ªÉm tra k√≠ch th∆∞·ªõc m√†n h√¨nh ƒë·ªÉ ƒëi·ªÅu ch·ªânh s·ªë l∆∞·ª£ng th·∫ª hi·ªÉn th·ªã
  useEffect(() => {
    const handleResize = () => {
      if (window.innerWidth < 640) {
        setSlidesToShow(1);
      } else if (window.innerWidth < 1024) {
        setSlidesToShow(2);
      } else {
        setSlidesToShow(3);
      }
    };
   
    window.addEventListener('resize', handleResize);
    handleResize();
   
    return () => window.removeEventListener('resize', handleResize);
  }, []);
 
  // Thi·∫øt l·∫≠p autoplay
  useEffect(() => {
    let interval: number;
   
    if (autoplayEnabled && hotJobs.length > 0) {
      interval = window.setInterval(() => {
        goToNext();
      }, 5000); // Chuy·ªÉn slide m·ªói 5 gi√¢y
    }
   
    return () => {
      if (interval) clearInterval(interval);
    };
  }, [currentIndex, hotJobs.length, autoplayEnabled]);
 
  // X·ª≠ l√Ω s·ª± ki·ªán vu·ªët tr√™n thi·∫øt b·ªã di ƒë·ªông
  const handleTouchStart = (e: React.TouchEvent) => {
    setTouchStart(e.targetTouches[0].clientX);
  };
 
  const handleTouchMove = (e: React.TouchEvent) => {
    setTouchEnd(e.targetTouches[0].clientX);
  };
 
  const handleTouchEnd = () => {
    if (!touchStart || !touchEnd) return;
   
    const distance = touchStart - touchEnd;
    const isLeftSwipe = distance > 50;
    const isRightSwipe = distance < -50;
   
    if (isLeftSwipe) {
      goToNext();
    } else if (isRightSwipe) {
      goToPrevious();
    }
   
    setTouchStart(null);
    setTouchEnd(null);
  };
 
  const goToPrevious = () => {
    setAutoplayEnabled(false); // T·∫°m d·ª´ng autoplay khi ng∆∞·ªùi d√πng t∆∞∆°ng t√°c
   
    // C·∫≠p nh·∫≠t code ƒë·ªÉ x·ª≠ l√Ω v√≤ng l·∫∑p v√¥ h·∫°n
    if (currentIndex === 0) {
      // N·∫øu ƒëang ·ªü slide ƒë·∫ßu ti√™n th√¨ chuy·ªÉn ƒë·∫øn slide cu·ªëi c√πng
      setCurrentIndex(Math.max(0, hotJobs.length - slidesToShow));
    } else {
      setCurrentIndex(currentIndex - 1);
    }
   
    // K√≠ch ho·∫°t l·∫°i autoplay sau 10 gi√¢y kh√¥ng t∆∞∆°ng t√°c
    setTimeout(() => setAutoplayEnabled(true), 10000);
  };
 
  const goToNext = () => {
    // C·∫≠p nh·∫≠t code ƒë·ªÉ x·ª≠ l√Ω v√≤ng l·∫∑p v√¥ h·∫°n
    if (currentIndex >= hotJobs.length - slidesToShow) {
      // N·∫øu ƒëang ·ªü slide cu·ªëi c√πng th√¨ quay v·ªÅ slide ƒë·∫ßu ti√™n
      setCurrentIndex(0);
    } else {
      setCurrentIndex(currentIndex + 1);
    }
  };
 
  if (hotJobs.length === 0) return null;
 
  return (
    <div className="mb-6 md:mb-10 relative"
      onTouchStart={handleTouchStart}
      onTouchMove={handleTouchMove}
      onTouchEnd={handleTouchEnd}
    >
      <div className="flex items-center justify-between mb-4">
        <h2 className="text-xl font-semibold text-blue-700 flex items-center">
          üî• <span className="ml-2">Job Hot</span>
        </h2>
        <div className="flex items-center space-x-2">
          {/* Th√™m n√∫t ƒëi·ªÅu h∆∞·ªõng v√†o c·∫°nh n√∫t "Xem t·∫•t c·∫£" */}
          <button
            onClick={goToPrevious}
            className="bg-white/90 hover:bg-white rounded-full p-1 shadow-sm"
          >
            <ChevronLeft className="h-5 w-5 text-blue-700" />
          </button>
          <button
            onClick={goToNext}
            className="bg-white/90 hover:bg-white rounded-full p-1 shadow-sm"
          >
            <ChevronRight className="h-5 w-5 text-blue-700" />
          </button>
         
        </div>
      </div>
     
      <div className="relative overflow-hidden">
        <div className="flex transition-transform duration-500 ease-out"
          style={{ transform: `translateX(-${currentIndex * (100 / slidesToShow)}%)` }}>
          {hotJobs.map((hotJob) => (
            <div
              key={hotJob.id}
              className="w-full sm:w-1/2 lg:w-1/3 flex-shrink-0 px-2"
            >
              <Link
                to={`/gig/${hotJob.jobId}`}
                className="block h-full bg-white rounded-xl shadow-md overflow-hidden transition-all hover:shadow-lg hover:-translate-y-1 border border-gray-100"
              >
                <div className="relative h-40 overflow-hidden bg-gray-100">
                  <img
                    src={hotJob.bannerImage}
                    alt={hotJob.title}
                    className="w-full h-full object-cover"
                  />
                  <div className="absolute top-2 right-2">
                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                      Hot Job
                    </span>
                  </div>
                </div>
               
                <div className="p-4">
                  <h3 className="text-lg font-semibold text-gray-900 line-clamp-1">
                    {hotJob.title}
                  </h3>
                  <p className="mt-1 text-sm text-gray-500 line-clamp-2 h-10">
                    {hotJob.description}
                  </p>
                 
                  <div className="mt-3 flex items-center justify-between">
                    <div className="flex items-center">
                      <div className="flex-shrink-0">
                        <img
                          className="h-8 w-8 rounded-full"
                          src={hotJob.job.freelancer.avatar || "https://via.placeholder.com/150"}
                          alt={hotJob.job.freelancer.name}
                        />
                      </div>
                      <div className="ml-2">
                        <p className="text-xs text-gray-600">{hotJob.job.freelancer.name}</p>
                        <div className="flex items-center">
                          <div className="flex items-center">
                            <Star className="h-3 w-3 text-yellow-400 fill-yellow-400" />
                            <span className="ml-1 text-xs text-gray-500">4.9</span>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div className="flex items-center text-green-600">
                      <DollarSign className="h-4 w-4" />
                      <span className="text-sm font-semibold">{formatCurrency(hotJob.job.price)}</span>
                    </div>
                  </div>
                </div>
              </Link>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};


export default HotJobsBanner; 